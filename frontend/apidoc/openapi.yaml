openapi: 3.0.3
info:
  title: 'Codechallenge Cart API'
  description: 'Codechallenge Cart API'
  version: 1.0.0
servers:
  -
    url: 'http://localhost:8005'
paths:
  /api/cart/products:
    get:
      summary: 'GET api/cart/products'
      operationId: gETApicartproducts
      description: 'Return a json with the content of the cart, count of items and total price'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer N7fp6GTjO9CJD1QIhqv0Ty1ZZbJeS3tFIbToFJZQ'
          schema:
            type: string
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: object
                example:
                  products:
                    -
                      id: 1
                      reference: SKU00001
                      name: MUNDAKA
                      description: 'Gafas de sol MUNDAKA'
                      price: 35
                      pivot:
                        cart_id: 52
                        product_id: 1
                        quantity: 1
                  count: 1
                  total: 35
                properties:
                  products:
                    type: array
                    example:
                      -
                        id: 1
                        reference: SKU00001
                        name: MUNDAKA
                        description: 'Gafas de sol MUNDAKA'
                        price: 35
                        pivot:
                          cart_id: 52
                          product_id: 1
                          quantity: 1
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        reference:
                          type: string
                          example: SKU00001
                        name:
                          type: string
                          example: MUNDAKA
                        description:
                          type: string
                          example: 'Gafas de sol MUNDAKA'
                        price:
                          type: integer
                          example: 35
                        pivot:
                          type: object
                          properties:
                            cart_id:
                              type: integer
                              example: 52
                            product_id:
                              type: integer
                              example: 1
                            quantity:
                              type: integer
                              example: 1
                  count:
                    type: integer
                    example: 1
                  total:
                    type: integer
                    example: 35
        401:
          description: unauthenticated
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated
                properties:
                  message:
                    type: string
                    example: Unauthenticated
      tags:
        - 'Cart Management'
    delete:
      summary: 'DELETE api/cart/products'
      operationId: dELETEApicartproducts
      description: 'Delete all products from the cart'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer N7fp6GTjO9CJD1QIhqv0Ty1ZZbJeS3tFIbToFJZQ'
          schema:
            type: string
      responses:
        200:
          description: success
          content:
            text/plain:
              schema:
                type: string
                example: '{ "message": Success }'
        401:
          description: unauthenticated
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated
                properties:
                  message:
                    type: string
                    example: Unauthenticated
      tags:
        - 'Cart Management'
  /api/cart/products/count:
    get:
      summary: 'GET api/cart/products/count'
      operationId: gETApicartproductscount
      description: 'Return the number of products in the cart'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer N7fp6GTjO9CJD1QIhqv0Ty1ZZbJeS3tFIbToFJZQ'
          schema:
            type: string
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: object
                example:
                  count: 1
                properties:
                  count:
                    type: integer
                    example: 1
        401:
          description: unauthenticated
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated
                properties:
                  message:
                    type: string
                    example: Unauthenticated
      tags:
        - 'Cart Management'
  /api/cart/products/total:
    get:
      summary: 'GET api/cart/products/total'
      operationId: gETApicartproductstotal
      description: 'Return the total price of products in the cart'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer N7fp6GTjO9CJD1QIhqv0Ty1ZZbJeS3tFIbToFJZQ'
          schema:
            type: string
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: object
                example:
                  total: 35
                properties:
                  total:
                    type: integer
                    example: 35
        401:
          description: unauthenticated
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated
                properties:
                  message:
                    type: string
                    example: Unauthenticated
      tags:
        - 'Cart Management'
  /api/cart/product:
    post:
      summary: 'POST api/cart/product'
      operationId: pOSTApicartproduct
      description: 'Add a new product to the cart'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer N7fp6GTjO9CJD1QIhqv0Ty1ZZbJeS3tFIbToFJZQ'
          schema:
            type: string
      responses:
        200:
          description: success
          content:
            text/plain:
              schema:
                type: string
                example: '{ "message": Success }'
        401:
          description: unauthenticated
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated
                properties:
                  message:
                    type: string
                    example: Unauthenticated
        422:
          description: 'invalid parameters'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The selected id is invalid'
                properties:
                  message:
                    type: string
                    example: 'The selected id is invalid'
      tags:
        - 'Cart Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: ''
                  example: 12
                quantity:
                  type: integer
                  description: 'Must be at least 1.'
                  example: 43
              required:
                - id
                - quantity
  '/api/cart/product/{id}':
    put:
      summary: 'PUT api/cart/product/{id}'
      operationId: pUTApicartproductid
      description: 'Update the quantity of a product in the cart'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer N7fp6GTjO9CJD1QIhqv0Ty1ZZbJeS3tFIbToFJZQ'
          schema:
            type: string
      responses:
        200:
          description: success
          content:
            text/plain:
              schema:
                type: string
                example: '{ "message": Success }'
        401:
          description: unauthenticated
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated
                properties:
                  message:
                    type: string
                    example: Unauthenticated
        422:
          description: 'invalid parameters'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The selected id is invalid'
                properties:
                  message:
                    type: string
                    example: 'The selected id is invalid'
      tags:
        - 'Cart Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: 'The ID of the product.'
                  example: 9
                quantity:
                  type: integer
                  description: 'Must be at least 1.'
                  example: 87
              required:
                - id
                - quantity
    delete:
      summary: 'DELETE api/cart/product/{id}'
      operationId: dELETEApicartproductid
      description: 'Delete a product from the cart'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer N7fp6GTjO9CJD1QIhqv0Ty1ZZbJeS3tFIbToFJZQ'
          schema:
            type: string
      responses:
        200:
          description: success
          content:
            text/plain:
              schema:
                type: string
                example: '{ "message": Success }'
        401:
          description: unauthenticated
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated
                properties:
                  message:
                    type: string
                    example: Unauthenticated
        422:
          description: 'invalid parameters'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The selected id is invalid'
                properties:
                  message:
                    type: string
                    example: 'The selected id is invalid'
      tags:
        - 'Cart Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: 'The ID of the product.'
                  example: 9
              required:
                - id
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the product.'
        example: 1
        required: true
        schema:
          type: integer
  /api/cart/confirm:
    post:
      summary: 'POST api/cart/confirm'
      operationId: pOSTApicartconfirm
      description: "Confirm the cart. Creates a new Order with the contents of the cart and empties the cart.\nOnly registered and logged in users can confirm the cart"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer N7fp6GTjO9CJD1QIhqv0Ty1ZZbJeS3tFIbToFJZQ'
          schema:
            type: string
      responses:
        200:
          description: success
          content:
            text/plain:
              schema:
                type: string
                example: '{ "message": Success }'
        401:
          description: unauthenticated
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated
                properties:
                  message:
                    type: string
                    example: Unauthenticated
        403:
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthorized
                properties:
                  message:
                    type: string
                    example: Unauthorized
      tags:
        - 'Cart Management'
  /api/products:
    get:
      summary: ''
      operationId: getApiProducts
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer N7fp6GTjO9CJD1QIhqv0Ty1ZZbJeS3tFIbToFJZQ'
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Product management'
  '/api/product/{id}':
    get:
      summary: ''
      operationId: getApiProductId
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer N7fp6GTjO9CJD1QIhqv0Ty1ZZbJeS3tFIbToFJZQ'
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Product management'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the product.'
        example: 1
        required: true
        schema:
          type: integer
  /api/token:
    get:
      summary: 'GET api/token'
      operationId: gETApitoken
      description: 'Return a json array containing a new auth token for a new GuestUser'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  token: 10040|MMB5RB8w7U5zzz4DjjEJwFQdwFFu3PhxmwSbls7H
                properties:
                  token:
                    type: string
                    example: 10040|MMB5RB8w7U5zzz4DjjEJwFQdwFFu3PhxmwSbls7H
      tags:
        - 'User management'
      security: []
  /api/user:
    get:
      summary: 'GET api/user'
      operationId: gETApiuser
      description: 'Return a Json array containing the information of the user'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer N7fp6GTjO9CJD1QIhqv0Ty1ZZbJeS3tFIbToFJZQ'
          schema:
            type: string
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: object
                example:
                  name: Javier
                  email: javier@smartidea.es
                  address: 'Mi dirección'
                  registered: true
                properties:
                  name:
                    type: string
                    example: Javier
                  email:
                    type: string
                    example: javier@smartidea.es
                  address:
                    type: string
                    example: 'Mi dirección'
                  registered:
                    type: boolean
                    example: true
        401:
          description: unauthenticated
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated
                properties:
                  message:
                    type: string
                    example: Unauthenticated
      tags:
        - 'User management'
  /api/user/login:
    post:
      summary: 'POST api/user/login'
      operationId: pOSTApiuserlogin
      description: "Return a json array containing a new auth token for registered user.\nChecks if the email belongs to a existing domain"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer N7fp6GTjO9CJD1QIhqv0Ty1ZZbJeS3tFIbToFJZQ'
          schema:
            type: string
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: object
                example:
                  token: 34|0JJwyg6oCkEBnlAGFVOlq5f42SY9u476JSCBVUwT
                properties:
                  token:
                    type: string
                    example: 34|0JJwyg6oCkEBnlAGFVOlq5f42SY9u476JSCBVUwT
        401:
          description: unauthenticated
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated
                properties:
                  message:
                    type: string
                    example: Unauthenticated
        403:
          description: 'wrong credentials'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Login error'
                properties:
                  message:
                    type: string
                    example: 'Login error'
        422:
          description: 'invalid parameters'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The password field is required.'
                properties:
                  message:
                    type: string
                    example: 'The password field is required.'
      tags:
        - 'User management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'valid email from existing domain.'
                  example: codechallenge@gmail.com
                password:
                  type: string
                  description: ''
                  example: et
              required:
                - email
                - password
  /api/user/register:
    post:
      summary: 'POST api/user/register'
      operationId: pOSTApiuserregister
      description: "Process a registration request.\nChecks if the email belongs to a existing domain"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer N7fp6GTjO9CJD1QIhqv0Ty1ZZbJeS3tFIbToFJZQ'
          schema:
            type: string
      responses:
        200:
          description: success
          content:
            text/plain:
              schema:
                type: string
                example: ''
        401:
          description: unauthenticated
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated
                properties:
                  message:
                    type: string
                    example: Unauthenticated
        403:
          description: 'register failed'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Register error'
                properties:
                  message:
                    type: string
                    example: 'Register error'
        422:
          description: 'invalid parameters'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The password field is required.'
                properties:
                  message:
                    type: string
                    example: 'The password field is required.'
      tags:
        - 'User management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'valid email from existing domain.'
                  example: codechallenge@gmail.com
                password:
                  type: string
                  description: ''
                  example: laudantium
                name:
                  type: string
                  description: ''
                  example: iure
                address:
                  type: string
                  description: ''
                  example: maiores
              required:
                - email
                - password
                - name
                - address
  /api/user/orders:
    get:
      summary: 'GET api/user/orders'
      operationId: gETApiuserorders
      description: 'Return a Json array containing the orders of the user'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer N7fp6GTjO9CJD1QIhqv0Ty1ZZbJeS3tFIbToFJZQ'
          schema:
            type: string
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: object
                example:
                  orders:
                    -
                      id: 6
                      user_id: 104
                      address: 'Mi dirección'
                      total: 35
                      created_at: '2023-04-10T03:31:10.000000Z'
                      updated_at: '2023-04-10T03:31:10.000000Z'
                properties:
                  orders:
                    type: array
                    example:
                      -
                        id: 6
                        user_id: 104
                        address: 'Mi dirección'
                        total: 35
                        created_at: '2023-04-10T03:31:10.000000Z'
                        updated_at: '2023-04-10T03:31:10.000000Z'
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 6
                        user_id:
                          type: integer
                          example: 104
                        address:
                          type: string
                          example: 'Mi dirección'
                        total:
                          type: integer
                          example: 35
                        created_at:
                          type: string
                          example: '2023-04-10T03:31:10.000000Z'
                        updated_at:
                          type: string
                          example: '2023-04-10T03:31:10.000000Z'
        401:
          description: unauthenticated
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated
                properties:
                  message:
                    type: string
                    example: Unauthenticated
      tags:
        - 'User management'
tags:
  -
    name: 'Cart Management'
    description: "\nAPIs for managing carts"
  -
    name: 'Product management'
    description: ''
  -
    name: 'User management'
    description: "\nAPIs for managing users"
components:
  securitySchemes:
    default:
      type: http
      scheme: bearer
      description: ''
security:
  -
    default: []
